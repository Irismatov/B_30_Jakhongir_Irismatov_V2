1 - savol:
LinkedList hamda ArrayListning bir biridan farqi shundaki: LinkedList ma'lumotlarni Node ko'rinishida saqlaydi. Har bir node o'z ichida qiymat saqlaydi va o'zidan keyingi node ga reference ham saqlaydi. 

ArrayList ma'lumotlarni array ko'rinishida saqlaydi. 

ArrayList ma'lumotlarni array ko'rinishida saqlaganligi uchun bu collection turida malumotlarga index orqali murojat qilish amali tezroq ishlaydi, ammo biror ma'lumotni o'chirib tashlash sekinroq ishlaydi, sababi array ichidagi ma'lumotni biz o'chirib yuborganimizdan so'ng, arraydagi qaysidir indexning ma'lumoti null bo'lib qoladi va biz har bir ma'lumotni bitta orqaga qo'yishimiz kerak bo'ladi. LinkedList ma'lumotlarni Node ko'rinishida saqlaganligi uchun unda ma'lumotni o'chirib yuborish, shunchaki biz o'chirib tashlamoqchi bo'lgan node dan oldingi node ni reference ni uzib, o'chirmoqchi bo'lgan malumotimizning node idan keyingi node ga o'zgartirib qo'yishimiz kifoya.

2-savol:
LinkedHashMap ma'lumotlarni saqlashda oddiy HashMap kabi Nodelardan foydalanadi. O'zi aslida "Map"lar o'zida key hamda value saqlaydigan data strukturalari hisoblanadi. Bu data structure da o'ziga nodelarni saqlovchi array yaratiladi. Key va Value dan iborat bo'lgan malumot qo'shilganda "key"ning hashcodei o'sha arrayning size iga qoldiqli bo'linadi va hosil bolgan son ushbu key uchun arraydagi index bo'ladi va malumot Node(key, value, next) ko'rinishda qo'yiladi. Agar arrayda o'sha indexda ma'lumot bo'lmasa o'sha indexga qo'yiladi, agar allaqachon ma'lumot qo'yilgan bo'lishi mumkin. Ushbu holatda agar "key" bir xil bo'ladigan bo'lsa, uning valuesi yangi value bilan o'zgartiriladi va eski value qaytariladi. Agar "key" har xil lekin ularning index lari bir xil bo'lib qoladigan bo'lsa, yangi malumotdan yangi node yaratilib, array ichida turgan keyning node ichidagi nextiga referenci qo'yiladi. Agar arraydagi malumotlarning soni array size ning 75%ini tashkil qilsa, bu holda array size oshirilib malumotlar boshqatdan rehash qilinadi.

Bundan tashqari LinkedHashMap oddi HashMapdan farqi, u ma'lumotlarning insertion orderini ham saqlaydi(first va last nodelari orqali). Bu bizga ma'lumotlarni hammasiga murojaat qilishimizni osonlashtiradi. 

3-savol:
Genericdan foydalanish bizga faqatgina bitta ma'lumot bilan emas, turli xil ma'lumotlar bilan ishlab, bir vaqtning o'zida type-safetyini ta'minlash uchun kerak. Biz genericlarsiz ham turli xil ma'lumotlar bilan ishlay olamiz. Buning uchun biz doimiy tarzda "casting" amalga oshirishimiz kerak bo'ladi. Va buning oqibatida dastur run bo'layotgan vaqtida "casting" exceptionini tashlashi mumkin, foydalanuvchining xatosi tufayli. Buning oldini olish uchun generic dan foydalanish tavsiya qilinadi, sababi generic bizga dastur run bo'lishidan oldin, compile timeda o'sha casting bo'lishdagi xatolarni ko'rsatib beradi.